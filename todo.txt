make evaluation completely unrelated to expressions so expression-like tasks can still be done 
without overhead (so you can still do algebra with trees of nodes and you can evaluate lambda 
calculus expressions).

create a system for importing sets of functions into an environment
have classes that contain sets of functions through a static function (so then they could be templated)
they would all match a concept and some could be templated to instanciate a vector<int> OR a vector<char>

organize environment class

wrap everything up nicely

allow any derived class to be passed as an argument for a base class (try using generic lambdas?)
